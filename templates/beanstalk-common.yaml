# This creates a common set of resources of Agora.
# The Beanstalk Application is designed to contain all envs (dev, stage, prod, etc..)
# Requires an existing HostedZone
AWSTemplateFormatVersion: 2010-09-09
Description: Essentials for Agora
Parameters:
  EbAppName:
    Description: Elastic Beanstalk Application Name
    Type: String
    Default: 'agora-ampad'
  DNSDomainName:
    Description: DNS Domain name for app
    Type: String
    Default: 'ampadscicomp.org'
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
    Default: 'SysBio'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
    Default: 'amp-ad'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'
    Default: 'anna.greenwood@sagebase.org'
Resources:
  BeanstalkServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - elasticbeanstalk.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                sts:ExternalId: elasticbeanstalk
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth'
        - 'arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService'
  BeanstalkApplication:
    Type: 'AWS::ElasticBeanstalk::Application'
    Properties:
      ApplicationName: !Ref EbAppName
      ResourceLifecycleConfig:
        ServiceRole: !GetAtt BeanstalkServiceRole.Arn
        VersionLifecycleConfig:
          MaxAgeRule:
            DeleteSourceFromS3: true
            Enabled: true
            MaxAgeInDays: 30
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join
        - '.'
        - - '*'
          - !Ref DNSDomainName
      DomainValidationOptions:
        - DomainName: !Join
            - '.'
            - - '*'
              - !Ref DNSDomainName
          ValidationDomain: !Ref DNSDomainName
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  KmsKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Join
        - '-'
        - - !Ref AWS::StackName
          - "KmsKey"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref AWS::AccountId
                    - ':root'
                - !ImportValue us-east-1-bootstrap-CfServiceRoleArn
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
          -
            Sid: "Allow use of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref AWS::AccountId
                    - ':root'
                - !ImportValue us-east-1-bootstrap-CfServiceRoleArn
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  KmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join
        - ''
        - - 'alias/'
          - !Ref AWS::StackName
          - '/KmsKey'
      TargetKeyId: !Ref KmsKey
Outputs:
  BeanstalkAppName:
    Value: !Ref BeanstalkApplication
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-BeanstalkAppName'
  BeanstalkServiceRole:
    Value: !Ref BeanstalkServiceRole
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-BeanstalkServiceRole'
  HostedZoneId:         # Existing hosted zone id
    Value: ZS9A6IHRRJXMS
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-HostedZoneId'
  SSLCertificate:
    Value: !Ref SSLCertificate
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-SSLCertificate'
  DNSDomainName:
    Value: !Ref DNSDomainName
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-DNSDomainName'
  KmsKey:
    Value: !Ref KmsKey
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-KmsKey'
  KmsKeyAlias:
    Value: !Ref KmsKeyAlias
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-KmsKeyAlias'
  KmsKeyArn:
    Value: !GetAtt KmsKey.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-KmsKeyArn'
